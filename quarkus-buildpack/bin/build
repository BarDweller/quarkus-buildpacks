#!/usr/bin/env bash
set -eo pipefail

echo "---> Quarkus Buildpack"

# GET ARGS
layersdir=$1
plan=$3

# GET CONFIGURATION
javaVersion=11
mavenVersion=3.6.3
gradleVersion=6.7.1
useWrapper=true

if [[ -f .buildpack.conf ]]; then
   source .buildpack.conf
fi

# CLEAN UP LAYER METADATA
rm -f "$layersdir"/java_*.toml
rm -f "$layersdir"/maven_*.toml
rm -f "$layersdir"/gradle_*.toml

# DOWNLOAD JAVA
javalayer="$layersdir"/java_"$javaVersion"
if [[ ! -f $javalayer/bin/java ]]; then
    echo "---> Downloading and extracting Java"
    mkdir -p "$javalayer"
    javaUrl="https://api.adoptopenjdk.net/v3/binary/latest/${javaVersion}/ga/linux/x64/jdk/hotspot/normal/adoptopenjdk"
    wget -q -O - "${javaUrl}" | tar xzm --strip-components=1 -C $javalayer
    # MAKE JAVA AVAILABLE FOR NEXT STEPS
    mkdir -p "$javalayer"/env
    echo "$javalayer" > "$javalayer"/env/JAVA_HOME
fi
export JAVA_HOME="$javalayer"
echo -e 'cache = true\nbuild = true\nlaunch = true' > "$javalayer.toml"

# DOWNLOAD MAVEN or GRADLE
usingWrapper=false
if [[ -f pom.xml && ( "$useWrapper" = false || ! -f mvnw ) ]]; then
    builderlayer="$layersdir"/maven_"$mavenVersion"
    mkdir -p "$builderlayer"
    if [[ ! -f $builderlayer/bin/mvn ]]; then
        echo "---> Downloading and extracting Maven"
        mavenUrl="https://archive.apache.org/dist/maven/maven-3/${mavenVersion}/binaries/apache-maven-${mavenVersion}-bin.tar.gz"
        wget -q -O - "${mavenUrl}" | tar xzm --strip-components=1 -C $builderlayer
    fi
    echo -e 'cache = true\nbuild = true\nlaunch = true' > "$builderlayer.toml"
elif [[ -f build.gradle && ( "$useWrapper" = false || ! -f gradlew ) ]]; then
    builderlayer="$layersdir"/gradle_"$gradleVersion"
    mkdir -p "$builderlayer"
    if [[ ! -f $builderlayer/bin/gradle ]]; then
        echo "---> Downloading and extracting Gradle"
        gradleUrl="https://services.gradle.org/distributions/gradle-${gradleVersion}-bin.zip"
        wget -q -O - "${gradleUrl}" | tar xzm --strip-components=1 -C $builderlayer
    fi
    echo -e 'cache = true\nbuild = true\nlaunch = true' > "$builderlayer.toml"
else
    echo "---> Using locally available build wrapper"
    usingWrapper=true
fi

# MAKE SURE DOWNLOADED ARTIFACTS WILL GET CACHED
m2layer="$layersdir"/m2
mkdir -p "$m2layer"
ln -s "$m2layer" $HOME/.m2
echo -e 'cache = true\nlaunch = true' > "$m2layer.toml"

# BUILD THE APPLICATION
if [[ -f pom.xml ]]; then
    if [[ -f mvnw ]]; then
        mvnCommand=./mvnw
    else
        mvnCommand="$builderlayer"/bin/mvn
    fi
    buildCommand="$mvnCommand package"
    #buildCommand="$mvnCommand package -Pnative"
    runCommand="$mvnCommand quarkus:dev"
elif [[ -f build.gradle ]]; then
    if [[ -f gradlew ]]; then
        gradleCommand=./gradlew
    else
        gradleCommand="$builderlayer"/bin/gradlew
    fi
    buildCommand="$gradleCommand build"
    #buildCommand="$gradleCommand buildNative"
    runCommand="$gradleCommand quarkusDev"
fi
$buildCommand

# SET DEFAULT START COMMAND
cat > "$layersdir/launch.toml" <<EOL
[[processes]]
type = "web"
command = "ln -s \"$m2layer\" $HOME/.m2 ; $runCommand"
EOL
